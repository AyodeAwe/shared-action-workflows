# A reusable workflow that checks the following:
# - Generated dependency files are up-to-date
# - An "all" environment file is created that includes all of the conda dependencies
#   from the dependencies.yaml file.

on:
  workflow_call:
    inputs:
      CONFIG_FILE_PATH:
        description: "Location of the dependencies.yaml configuration file"
        default: "dependencies.yaml"
        required: false
        type: string

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install rapids-dependency-file-generator
        run: pip install rapids-dependency-file-generator
      - name: Delete existing generated files
        run: |
          # delete existing files by grepping for files w/ "auto-generated" header
          SEARCH_PATTERN='^# This file is generated by `rapids.*'
          grep -rlP \
            --include="*.txt" \
            --include="*.yaml" \
            "${SEARCH_PATTERN}" . | \
            xargs rm
      - name: Run rapids-dependency-file-generator to generate dependency files
        run: rapids-dependency-file-generator --config ${{ inputs.CONFIG_FILE_PATH }}
      - name: Ensure generated dependency files are up-to-date
        run: |
          git diff --exit-code
          test -z "$(git status --porcelain)" # ensures there are no untracked dependency files
      - name: Ensure an "all" environment exists
        run: |
          # ensure .files.all exists & generates conda environment file
          set -x
          yq \
            --exit-status \
            '.files | has("all")' ${{ inputs.CONFIG_FILE_PATH }}
          yq \
            --exit-status \
            '.files.all.generate | match("both|conda")' ${{ inputs.CONFIG_FILE_PATH }}

          export COMMON_DEP_LISTS=$(
            yq \
              --output-format json \
              '[.dependencies.["conda_and_requirements","conda"].common | keys] | flatten' ${{ inputs.CONFIG_FILE_PATH }}
          )

          export SPECIFIC_DEP_LISTS=$(
            yq \
              --output-format json \
              '[.dependencies.["conda_and_requirements","conda"].specific[] | keys - ["matrix"]] | flatten' ${{ inputs.CONFIG_FILE_PATH }}
          )

          export ALL_DEP_LISTS=$(
            yq \
              --output-format json \
              --null-input \
              'env(SPECIFIC_DEP_LISTS) + env(COMMON_DEP_LISTS) | unique | sort'
          )

          export ALL_ENV_INCLUDES=$(
            yq \
              --output-format json \
              '.files.all.includes | sort' ${{ inputs.CONFIG_FILE_PATH }}
          )
          yq \
            --null-input \
            --exit-status \
            'strenv(ALL_ENV_INCLUDES) == strenv(ALL_DEP_LISTS)'
