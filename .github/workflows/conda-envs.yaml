# A reusable workflow that checks the following:
# - Generated conda environment files are up-to-date
# - A "full" environment file is created that encompasses all of the dependencies
#   from the config file.

on:
  workflow_call:
    inputs:
      CONFIG_FILE_PATH:
        description: "Location of the envs.yaml configuration file"
        default: "conda/environments/envs.yaml"
        required: false
        type: string

jobs:
  check_generated_files:
    env:
      CONFIG_FILE_PATH: ${{ inputs.CONFIG_FILE_PATH }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Compute additional env vars
        run: |
          echo "CONFIG_FILE_DIR=$(dirname ${{ env.CONFIG_FILE_PATH }})" | tee --append $GITHUB_ENV
          echo "CONFIG_FILE_NAME=$(basename ${{ env.CONFIG_FILE_PATH }})" | tee --append $GITHUB_ENV
      - name: Install rapids-env-generator # see https://github.com/rapidsai/rapids-env-generator for details
        run: |
          wget -O - https://github.com/rapidsai/rapids-env-generator/releases/latest/download/rapids_env_generator_bundle.tar.gz | tar -xz
          pip install ./rapids_env_generator-*.whl
      - name: Run rapids-env-generator to generate environment files
        run: |
          find ${{ env.CONFIG_FILE_DIR }} -type f ! -name ${{ env.CONFIG_FILE_NAME }} -delete # delete existing environment files
          reg --config ${{ env.CONFIG_FILE_PATH }}
      - name: Ensure generated environment files are up-to-date
        run: |
          git diff --exit-code
          test -z "$(git status --porcelain ${{ env.CONFIG_FILE_DIR }})" # ensures there are no untracked environment files
      - name: Ensure a "full" environment exists
        run: |
          # ensure .envs.full exists
          yq -e '.envs | has("full")' < ${{ env.CONFIG_FILE_PATH }}

          # ensure .envs.full.includes has all dependency lists
          export RESERVED_KEYS='["envs", "specifics", "channels"]'
          export DEP_LISTS=$(
            yq -e -o json \
            'keys |
            . - (strenv(RESERVED_KEYS) | from_json) |
            sort' < ${{ env.CONFIG_FILE_PATH }}
          )
          export FULL_ENV_INCLUDES=$(
            yq -e -o json \
            '.envs.full.includes |
            sort' < ${{ env.CONFIG_FILE_PATH }}
          )
          yq -ne 'strenv(FULL_ENV_INCLUDES) == strenv(DEP_LISTS)'
